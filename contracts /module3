// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract MyToken {

  uint256 public totalSupply;
  string public name;
  string public symbol;
  address public owner;
  
  // mapping of address to balances
  mapping(address => uint256) public balances;

  // events
  event Transfer(address indexed from, address indexed to, uint256 amount);
  event Mint(address indexed to, uint256 amount);
  event Burn(address indexed from, uint256 amount);

  constructor(string memory _name, string memory _symbol, address _owner) {
    totalSupply = 1000000;
    balances[msg.sender] = totalSupply;
    name = _name;
    symbol = _symbol;
    owner = _owner;
  }

  function setOwner(address newOwner) public {
    require(msg.sender == owner, "Only the owner can set the owner");
    owner = newOwner;
  }

  function mint(address to, uint256 amount) public returns (bool) {
    // requirement
    require(owner == msg.sender, "Only the owner can mint tokens");
    
    balances[to] += amount;
    totalSupply += amount;
    
    emit Mint(to, amount);
    return true;
  }

  function burn(uint256 amount) public returns (bool) {
    // requirement
    require(balances[msg.sender] >= amount, "No Enough Tokens");
    balances[msg.sender] -= amount;
    totalSupply -= amount;
    
    emit Burn(msg.sender, amount);
    return true;
  }

  function transfer(address to, uint256 amount) public returns (bool) {
    // requirement
    require(balances[msg.sender] >= amount, "No Enough Tokens");
    balances[msg.sender] -= amount;
    balances[to] += amount;
    
    emit Transfer(msg.sender, to, amount);
    return true;
  }
}
