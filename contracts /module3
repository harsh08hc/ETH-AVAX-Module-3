// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
  uint256 public totalSupply;
  string public name;
  string public symbol;
  address public owner;

  mapping(address => uint256) public balances;

  event Transfer(address indexed from, address indexed to, uint256 amount);
  event Mint(address indexed to, uint256 amount);
  event Burn(address indexed from, uint256 amount);

  constructor(string memory _name, string memory _symbol, address _owner) {
    totalSupply = 1000000;
    balances[msg.sender] = totalSupply;
    name = _name;
    symbol = _symbol;
    owner = _owner;
  }

  modifier onlyOwner() {
    require(msg.sender == owner, "Only the owner can call this function");
    _;
  }

  function setOwner(address newOwner) public onlyOwner {
    owner = newOwner;
  }

  function mint(address to, uint256 amount) public onlyOwner returns (bool) {
    require(amount > 0, "Amount must be greater than zero");

    balances[to] += amount;
    totalSupply += amount;

    emit Mint(to, amount);
    emit Transfer(address(0), to, amount);
    return true;
  }

  function burn(uint256 amount) public returns (bool) {
    require(amount > 0, "Amount must be greater than zero");
    require(balances[msg.sender] >= amount, "Not enough tokens to burn");

    balances[msg.sender] -= amount;
    totalSupply -= amount;

    emit Burn(msg.sender, amount);
    emit Transfer(msg.sender, address(0), amount);
    return true;
  }

  function transfer(address to, uint256 amount) public returns (bool) {
    require(amount > 0, "Amount must be greater than zero");
    require(balances[msg.sender] >= amount, "Not enough tokens to transfer");

    balances[msg.sender] -= amount;
    balances[to] += amount;

    emit Transfer(msg.sender, to, amount);
    return true;
  }

  function transferFrom(
    address from,
    address to,
    uint256 amount
  ) public returns (bool) {
    require(amount > 0, "Amount must be greater than zero");
    require(balances[from] >= amount, "Not enough tokens to transfer");
    require(msg.sender == owner || msg.sender == from, "Not authorized to transfer tokens");

    balances[from] -= amount;
    balances[to] += amount;

    emit Transfer(from, to, amount);
    return true;
  }

  function getBalance(address account) public view returns (uint256) {
    return balances[account];
  }
}
